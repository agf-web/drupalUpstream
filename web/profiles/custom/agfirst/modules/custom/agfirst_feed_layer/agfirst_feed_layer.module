<?php

/**
 * @file
 * Contains agfirst_feed_layer.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeViewBuilder;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function agfirst_feed_layer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the agfirst_feed_layer module.
    case 'help.page.agfirst_feed_layer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides support for the AgFirst Feed layer') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function agfirst_feed_layer_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget']->getPluginId() != "entity_reference_paragraphs" || empty($element['subform']['field_feed_type'])) {
    return;
  }

  $type_selector = ':input[name="field_layers[' . $context['delta'] . '][subform][field_feed_type]"]';

  // Remove extra content types from the list of referenced types.
  $element['subform']['field_content_type']['widget']['#options'] = [
    'article' => t('Articles'),
    'event' => t('Events'),
  ];

  // Set the form states for the various fields.
  $element['subform']['field_content_type']['#states'] = [
    'required' => [
      $type_selector => ['value' => 'auto'],
    ],
    'enabled' => [
      $type_selector => ['value' => 'auto'],
    ],
    'visible' => [
      $type_selector => ['value' => 'auto'],
    ],
  ];
  $element['subform']['field_filter_term']['#states'] = [
    'required' => [
      $type_selector => ['value' => 'auto'],
    ],
    'enabled' => [
      $type_selector => ['value' => 'auto'],
    ],
    'visible' => [
      $type_selector => ['value' => 'auto'],
    ],
  ];

  $element['subform']['field_curated_content']['#states'] = [
    'required' => [
      $type_selector => ['value' => 'manual'],
    ],
    'enabled' => [
      $type_selector => ['value' => 'manual'],
    ],
    'visible' => [
      $type_selector => ['value' => 'manual'],
    ],
  ];

}

/**
 * Implements hook_preprocess_HOOK().
 */
function agfirst_feed_layer_preprocess_paragraph(array &$variables) {

  $paragraph = $variables['paragraph'];
  $type = $paragraph->getType();
  if ($type != 'feed') {
    return;
  }

  $mode = $paragraph->field_feed_type->value;
  $content_type = $paragraph->field_content_type->target_id;

  if ($mode != 'auto' || empty($content_type)) {
    $sample = $variables['content']['field_curated_content']["0"];
    return;
  }

  // We assume three values, but that really should be checked and based on the
  // field definition.
  $query = \Drupal::entityQuery('node');
  $query->condition('type', $content_type)
    ->condition('status', NodeInterface::PUBLISHED)
    ->range(0, 3);

  switch ($content_type) {
    case 'article':
      if (!empty($paragraph->field_filter_term->target_id)) {
        $query->condition('field_tags', $paragraph->field_filter_term->target_id);
      }
      $query->sort('field_publication_date', 'DESC');
      $query->sort('created', 'DESC');
      break;

    case 'event':
      if (!empty($paragraph->field_filter_term->target_id)) {
        $query->condition('field_event_type', $paragraph->field_filter_term->target_id);
      }
      $date = new DrupalDateTime('yesterday');
      $date->setTimezone(new \DateTimezone(DATETIME_STORAGE_TIMEZONE));
      $formatted = $date->format(DATETIME_DATETIME_STORAGE_FORMAT);
      $query->condition('field_date.value', $formatted, '>=');
      $query->sort('field_date.value', 'ASC');
      break;

    default:
      $query->sort('created', 'DESC');
      break;
  }

  $results = $query->execute();

  if (empty($results)) {
    return;
  }

  $field_wrapper = [
    '#cache' => [
      'tags' => ['node:list'],
      'max-age' => '60',
    ],
    '#weight' => 0,
    '#theme' => 'field',
    '#title' => '',
    '#label_display' => 'hidden',
    "#view_mode" => "default",
    "#language" => "en",
    "#field_name" => "field_curated_content",
    "#field_type" => "entity_reference",
    "#field_translatable" => FALSE,
    "#entity_type" => "paragraph",
    "#bundle" => "feed",
    '#object' => $paragraph,
    "#is_multiple" => TRUE,
  ];
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($results);
  $builder = \Drupal::entityTypeManager()->getViewBuilder('node'); 
  $render_arrays = $builder->viewMultiple($nodes, 'feed_teaser');

  $variables['content']['field_curated_content'] = array_merge($field_wrapper, $render_arrays);
}
